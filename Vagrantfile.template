# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# Vagrantfile template for configuration of single or multi machine cluster running
# CentOS 6.x. PuppetLabs box name is CentOS 6.6 but it will always be the latest 6.x
# as stated by PuppetLabs

# # Visit for additional configuration
# https://www.vagrantup.com/docs/virtualbox/configuration.html
# # Self hosted Boxes
# https://github.com/hollodotme/Helpers/blob/master/Tutorials/vagrant/self-hosted-vagrant-boxes-with-versioning.md
# # Box Metadata Format
# https://www.vagrantup.com/docs/boxes/format.html
# vi: set ft=ruby :
#
#
# Define any machine you wish to be provisioned here
#
nodes = [
    {
        :name => "generic-machine1",
        # This box can either be one from hashicorp or 
        # a custom box
        :box => "centos-6.8-x64-gnome-puppet",
        :eth1 => "10.0.0.255",
        :mem => "1024",
        :cpu => "1",
        :linked_clone => "true",
        :puppet => "generic-machine1.pp",
        :showgui => true,
        # Ports to forward outside 
        :ports => [
            {
                :host => "65000",
                :guest => "65001"
            }
        ],
        #:bootstrap => "bootstrap.sh",
        #:puppet => "manifest.pp",
        :ssh =>"9999",
        :groups => "/vagrant/nested_group,/group2",
    }
]

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"


# The definitions above of the machines are what you should be modifying for each project
# The code below should not generally be touched
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  nodes.each do |opts|

      config.vm.define opts[:name] do |config|

          # Default to not check for updates. We don't have a personal server
          config.vm.box_check_update = false

          # Use this to override using Vagrants Cloud
          config.vm.box_url = "file://~/Documents/tHC/vagrant/devops.json"
          
          # Vagrant box to use
          config.vm.box = opts[:box]
          # Hostname
          config.vm.hostname = opts[:name]

          # SSH Configuration
          config.vm.network :forwarded_port, guest: 22, host: opts[:ssh], id: "ssh"
          # Network Port Configuration
          opts[:ports].each do |port|
               config.vm.network "forwarded_port", guest: port[:guest], host: port[:host]
          end

          # VMWare Fusion Provisioner
#          config.vm.provider "vmware_fusion" do |v|
#              v.vmx["memsize"] = opts[:mem]
#              v.vmx["numvcpus"] = opts[:cpu]
#          end
          
          # VirtualBox Provider, Configure CPU, Mem, IO
          config.vm.provider "virtualbox" do |vb| 


              # # Saves space if bringing up multiple instances based off the same 'base' box
              vb.linked_clone = opts[:linked_clone]
              
              # # The text that will appear as the name in VirtualBox
              vb.name = opts[:name]

              # # Should the UI for the VM be shown
              vb.gui = opts[:showgui]

              # # Shortcut to configure cpu and memory
              vb.cpus = opts[:cpu]
              vb.memory = opts[:mem]

              ## Old way to configure CPUs and Memory
              #vb.customize ["modifyvm", :id, "--cpus", opts[:cpu]]
              #vb.customize ["modifyvm", :id, "--memory", opts[:mem]]

              # # Overview https://www.virtualbox.org/manual/ch08.html#idm3526
              # # https://www.virtualbox.org/manual/ch08.html#vboxmanage-modifyvm
              # # This helps with...something, maybe performance?
              vb.customize ["modifyvm", :id, "--ioapic", "on"  ]

              # # Groups?
              # https://blogs.oracle.com/fatbloke/entry/creating_and_using_vm_groups
              vb.customize ["modifyvm", :id, "--groups", opts[:groups]]

              # # Enable Clipboard
              # [--clipboard disabled|hosttoguest|guesttohost|bidirectional]
              vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]

              # # Enable Clipboard
              # [--draganddrop disabled|hosttoguest]
              #vb.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]

              # # If on windows can use page fusion
              #vb.customize ["modifyvm", :id, "--pagefusion", "on"]


              # # HPET 
              # https://en.wikipedia.org/wiki/High_Precision_Event_Timer
              #vb.customize ["modifyvm", :id, "--hpet", "on"]
              #
              # # Useful if you don't want your host machine to come to a crawl
              # # when your guest is trying to hog the CPU
              #v.customize ["modifyvm", :id, "--cpuexecutioncap", "80"]
          end

          # Add additional network card for internal network communication
          config.vm.network :private_network, ip: opts[:eth1]

          # Configure additional shared folders
          #
          # config.vm.synced_folder "~/Documents", "/vagrant_data"

          #
          #
          # Provisioners
          # 
          # https://www.vagrantup.com/docs/provisioning/
          # 
          #
          #
          
          # File Provisioning
          #
          #
          #config.vm.provision "file", source: "~/.gitconfig", destination: ".gitconfig"
          
          # Puppet (Apply), no master (server) required
          #
          #config.vm.provision :puppet do |puppet|
          #    puppet.options = " --verbose --debug --hiera_config /vagrant/puppet/hiera.yaml"
          #    puppet.module_path='puppet/modules'
          #    puppet.manifests_path='puppet/manifests'
          #    puppet.manifest_file=opts[:puppet]
          #end
          #
          # Puppet Agent (Requires a Master)
          #
          
          # Ansible
          #
          # Requires Ansible to installed on host or provision "ansible_local"
          #config.vm.provision "ansible" do |ansible|
          #  ansible.playbook = "playbook.yml"
          #end
          #
          # Ansible Local
          #config.vm.provision "ansible_local" do |ansible|
          #    ansible.verbose        = true
          #    ansible.install        = true
          #    ansible.limit          = "all" # or only "nodes" group, etc.
          #    ansible.inventory_path = "inventory"
          #end

          # CFEngine
          #
          #
          #config.vm.provision "cfengine" do |cf|
          #  cf.am_policy_hub = true
          #  cf.files_path = "cfengine_files"
          #end

          # Salt (Masterless)
          #
          # # Use all the defaults:
          #config.vm.provision :salt do |salt|
          #  salt.masterless = true
          #  salt.minion_config = "salt/minion"
          #  salt.run_highstate = true
          #end


          # Chef
          # ------
          # Chef Solo (No server required, use Zero instead?)
          #
          # Chef Client (Uses the server)
          #
          # Chef Zero (Like Solo but runs light weight server on client)
          #
          # Chef Apply
          #   Doesn't support roles or Data Bags
          #

          # Docker
          #

          # Shell 
          #
          # Every VM must have a bootstrap shell provisioner even if empty
          #config.vm.provision "shell", path: opts[:bootstrap]
          #
      end
  end
end
